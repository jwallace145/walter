AWSTemplateFormatVersion: "2010-09-09"
Description: "WalterBackend infrastructure"

##################
### PARAMETERS ###
##################

Parameters:
  AppEnvironment:
    Type: String
    Description: The environment of the Walter backend stack
    Default: dev
    AllowedValues:
      - dev
      - preprod
      - prod

#################
### RESOURCES ###
#################

Resources:

  ##############
  ### LAMBDA ###
  ##############

  WalterAPIAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPI
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-${AppEnvironment}"

  WalterBackendAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterBackend
      FunctionVersion: $LATEST
      Name: !Sub "WalterBackend-${AppEnvironment}"

  WalterAPI:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-${AppEnvironment}"
      Description: !Sub "WalterAPI function to interact with WalterDB and WalterBackend (${AppEnvironment})"
      Handler: api.lambda_handler
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:20"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterBackend:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub "WalterBackend-${AppEnvironment}"
        Description: !Sub "WalterBackend function to read from WalterDB and write and send newsletters (${AppEnvironment})"
        Handler: walter.lambda_handler
        Role: !GetAtt WalterBackendRole.Arn
        Code:
          S3Bucket: walter-backend-src
          S3Key: walter-backend.zip
        Timeout: 60
        Runtime: python3.11
        Architectures:
          - "arm64"
        Layers:
          - !Join
            - ""
            - - "arn:aws:lambda:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":layer:"
              - "WalterAILambdaLayer:20"
        Environment:
          Variables:
            DOMAIN: DEVELOPMENT

  WalterBackendFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt NewslettersQueue.Arn
      FunctionName: !GetAtt WalterBackend.Arn
      Enabled: "True"

  ################
  ### DYNAMODB ###
  ################

  StocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: symbol
            KeyType: HASH
      TableName: !Sub "Stocks-${AppEnvironment}"

  UsersStocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_email
          AttributeType: S
        - AttributeName: stock_symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: user_email
            KeyType: HASH
          - AttributeName: stock_symbol
            KeyType: RANGE
      TableName: !Sub "UsersStocks-${AppEnvironment}"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: email
            KeyType: HASH
      TableName: !Sub "Users-${AppEnvironment}"

  #################
  ### IAM ROLES ###
  #################

  WalterAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterAPIRole-${AppEnvironment}"
      Description: "WalterAPI execution role to read and modify WalterDB and send newsletters (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterBackendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterBackendRole-${AppEnvironment}"
      Description: "WalterBackend execution role write and send newsletters (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ####################
  ### IAM POLICIES ###
  ####################

  BedrockAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "BedrockAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "bedrock:InvokeModel"
            Resource: "arn:aws:bedrock:us-east-1::foundation-model/meta.llama3-70b-instruct-v1:0"
      Roles:
        - !Ref WalterBackendRole
  
  CloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "CloudWatchAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  NewslettersBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
            Resource: !Sub "${NewslettersBucket.Arn}/*"
      Roles:
        - !Ref WalterBackendRole

  NewslettersQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
            Resource: !GetAtt NewslettersQueue.Arn
      Roles:
        - !Ref WalterBackendRole

  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SecretsManagerAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:PolygonAPIKey-vZymuJ"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  SimpleEmailSerivceAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SimpleEmailServiceAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ses:Send*"
            Resource: "*"
      Roles:
        - !Ref WalterBackendRole

  StocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "StocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt StocksTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  TemplatesBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "TemplatesBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "${TemplatesBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:List*"
            Resource: !GetAtt TemplatesBucket.Arn
      Roles:
        - !Ref WalterBackendRole

  UsersStocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersStocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt UsersStocksTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  UsersTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt UsersTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  ##########
  ### S3 ###
  ##########

  NewslettersBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-newsletters-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteOldNewsletters"
            Status: "Enabled"
            ExpirationInDays: 30

  NewslettersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewslettersBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: 
              - "s3:PutObject"
            Effect: Allow
            Resource: !Sub "${NewslettersBucket.Arn}/*"
            Principal: 
              AWS: !GetAtt WalterBackendRole.Arn

  TemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-templates-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplatesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: 
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "${TemplatesBucket.Arn}/*"
            Principal: 
              AWS: !GetAtt WalterBackendRole.Arn
          - Action: 
              - "s3:List*"
            Effect: Allow
            Resource: !GetAtt TemplatesBucket.Arn
            Principal: 
              AWS: !GetAtt WalterBackendRole.Arn

  ###########
  ### SQS ###
  ###########

  NewslettersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "NewslettersQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 3600