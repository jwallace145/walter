AWSTemplateFormatVersion: "2010-09-09"
Description: "WalterBackend infrastructure"

##################
### PARAMETERS ###
##################

Parameters:
  AppEnvironment:
    Type: String
    Description: The environment of the Walter backend stack
    Default: dev
    AllowedValues:
      - dev
      - preprod
      - prod

#################
### RESOURCES ###
#################

Resources:

  ###################
  ### API GATEWAY ###
  ###################

  WalterAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "WalterAPI-${AppEnvironment}"
      Description: "API Gateway for WalterAPI"

  WalterAPIAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: auth

  WalterAPIAuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIAuthResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIAuth.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIAuthCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIAuthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPIAuth
      Principal: apigateway.amazonaws.com

  WalterAPIUsers:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: users

  WalterAPICreateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPICreateUser.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPICreateUserCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIUsers
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPICreateUser
      Principal: apigateway.amazonaws.com

  WalterAPIGetUsersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIGetUser.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPIGetUser
      Principal: apigateway.amazonaws.com

  WalterAPIStocks:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: stocks

  WalterAPIAddStockMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIStocks
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIAddStock.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIAddStockCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIStocks
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIAddStockPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPIAddStock
      Principal: apigateway.amazonaws.com

  WalterAPIPrices:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: prices

  WalterAPIGetPricesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIPrices
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIGetPrices.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetPricesCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIPrices
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIGetPricesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPIGetPrices
      Principal: apigateway.amazonaws.com

  WalterAPIGetPortfolioResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: portfolios

  WalterAPIGetPortfolioMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIGetPortfolioResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIGetPortfolio.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetPortfolioCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIGetPortfolioResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIGetPortfolioPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPIGetPortfolio
      Principal: apigateway.amazonaws.com

  WalterAPISendNewsletterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WalterAPISendNewsletter
      Principal: apigateway.amazonaws.com

  WalterAPINewsletters:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: newsletters

  WalterAPISendNewsletterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPINewsletters
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPISendNewsletter.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPISendNewsletterCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPINewsletters
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ##############
  ### LAMBDA ###
  ##############

  WalterAPIAuthAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIAuth
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-Auth-${AppEnvironment}"

  WalterAPIAuth:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-Auth-${AppEnvironment}"
      Description: !Sub "WalterAPI: Auth - authenticate a user (${AppEnvironment})"
      Handler: api.auth_user
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterAPICreateUserAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPICreateUser
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-CreateUser-${AppEnvironment}"

  WalterAPICreateUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-CreateUser-${AppEnvironment}"
      Description: !Sub "WalterAPI: CreateUser - create user and add to database (${AppEnvironment})"
      Handler: api.create_user
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterAPIGetUserAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIGetUser
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-GetUser-${AppEnvironment}"

  WalterAPIGetUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-GetUser-${AppEnvironment}"
      Description: !Sub "WalterAPI: GetUser - get user from token (${AppEnvironment})"
      Handler: api.get_user
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterAPIAddStockAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIAddStock
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-AddStock-${AppEnvironment}"

  WalterAPIAddStock:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-AddStock-${AppEnvironment}"
      Description: !Sub "WalterAPI: AddStock - Add stock and number of shares to user portfolio (${AppEnvironment})"
      Handler: api.add_stock
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterAPIGetPricesAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIGetPrices
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-GetPrices-${AppEnvironment}"

  WalterAPIGetPrices:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-GetPrices-${AppEnvironment}"
      Description: !Sub "WalterAPI: GetPrices - Get pricing data for a given stock over a timeframe (${AppEnvironment})"
      Handler: api.get_prices
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterAPIGetPortfolioAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIGetPortfolio
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-GetPortfolio-${AppEnvironment}"

  WalterAPIGetPortfolio:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-GetPortfolio-${AppEnvironment}"
      Description: !Sub "WalterAPI: GetPortfolio - Get user portfolio with latest market data (${AppEnvironment})"
      Handler: api.get_portfolio
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT


  WalterAPISendNewsletterAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPISendNewsletter
      FunctionVersion: $LATEST
      Name: !Sub "WalterAPI-SendNewsletter-${AppEnvironment}"


  WalterAPISendNewsletter:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-SendNewsletter-${AppEnvironment}"
      Description: !Sub "WalterAPI: SendNewsletter - generate and send a newsletter to the given user (${AppEnvironment})"
      Handler: api.send_newsletter
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterNewslettersAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterNewsletters
      FunctionVersion: $LATEST
      Name: !Sub "WalterNewsletters-${AppEnvironment}"

  WalterNewsletters:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterNewsletters-${AppEnvironment}"
      Description: !Sub "WalterNewsletters: Gets users from WalterDB and sends newsletter requests to queue (${AppEnvironment})"
      Handler: newsletters.send_messages
      Role: !GetAtt WalterNewslettersRole.Arn
      Code:
        S3Bucket: walter-backend-src
        S3Key: walter-backend.zip
      Timeout: 60
      Runtime: python3.11
      Architectures:
        - "arm64"
      Layers:
        - !Join
          - ""
          - - "arn:aws:lambda:"
            - !Ref "AWS::Region"
            - ":"
            - !Ref "AWS::AccountId"
            - ":layer:"
            - "WalterAILambdaLayer:22"
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT

  WalterBackendAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterBackend
      FunctionVersion: $LATEST
      Name: !Sub "WalterBackend-${AppEnvironment}"

  WalterBackend:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub "WalterBackend-${AppEnvironment}"
        Description: !Sub "WalterBackend function to read from WalterDB and write and send newsletters (${AppEnvironment})"
        Handler: walter.lambda_handler
        Role: !GetAtt WalterBackendRole.Arn
        Code:
          S3Bucket: walter-backend-src
          S3Key: walter-backend.zip
        Timeout: 60
        Runtime: python3.11
        Architectures:
          - "arm64"
        Layers:
          - !Join
            - ""
            - - "arn:aws:lambda:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":layer:"
              - "WalterAILambdaLayer:22"
        Environment:
          Variables:
            DOMAIN: DEVELOPMENT

  WalterBackendFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt NewslettersQueue.Arn
      FunctionName: !GetAtt WalterBackend.Arn
      Enabled: "True"

  ################
  ### DYNAMODB ###
  ################

  StocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: symbol
            KeyType: HASH
      TableName: !Sub "Stocks-${AppEnvironment}"

  UsersStocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_email
          AttributeType: S
        - AttributeName: stock_symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: user_email
            KeyType: HASH
          - AttributeName: stock_symbol
            KeyType: RANGE
      TableName: !Sub "UsersStocks-${AppEnvironment}"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: email
            KeyType: HASH
      TableName: !Sub "Users-${AppEnvironment}"

  #################
  ### IAM ROLES ###
  #################

  WalterAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterAPIRole-${AppEnvironment}"
      Description: "WalterAPI execution role to read and modify WalterDB and send newsletters (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterNewslettersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterNewslettersRole-${AppEnvironment}"
      Description: "WalterNewsletters role to send newsletter requests to the queue (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterBackendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterBackendRole-${AppEnvironment}"
      Description: "WalterBackend execution role write and send newsletters (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ####################
  ### IAM POLICIES ###
  ####################

  BedrockAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "BedrockAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "bedrock:InvokeModel"
            Resource: "arn:aws:bedrock:us-east-1::foundation-model/meta.llama3-70b-instruct-v1:0"
      Roles:
        - !Ref WalterBackendRole
  
  CloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "CloudWatchAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  NewslettersBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
            Resource: !Sub "${NewslettersBucket.Arn}/*"
      Roles:
        - !Ref WalterBackendRole

  NewslettersQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt NewslettersQueue.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole

  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SecretsManagerAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:PolygonAPIKey-vZymuJ"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:JWTSecretKey-E5va6r"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole

  SimpleEmailSerivceAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SimpleEmailServiceAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ses:Send*"
            Resource: "*"
      Roles:
        - !Ref WalterBackendRole

  StocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "StocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt StocksTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  TemplatesBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "TemplatesBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "${TemplatesBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:List*"
            Resource: !GetAtt TemplatesBucket.Arn
      Roles:
        - !Ref WalterBackendRole

  UsersStocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersStocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt UsersStocksTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  UsersTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt UsersTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole

  ##########
  ### S3 ###
  ##########

  NewslettersBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-newsletters-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteOldNewsletters"
            Status: "Enabled"
            ExpirationInDays: 30

  NewslettersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewslettersBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: 
              - "s3:PutObject"
            Effect: Allow
            Resource: !Sub "${NewslettersBucket.Arn}/*"
            Principal: 
              AWS: !GetAtt WalterBackendRole.Arn

  TemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-templates-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplatesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: 
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "${TemplatesBucket.Arn}/*"
            Principal: 
              AWS: !GetAtt WalterBackendRole.Arn
          - Action: 
              - "s3:List*"
            Effect: Allow
            Resource: !GetAtt TemplatesBucket.Arn
            Principal: 
              AWS: !GetAtt WalterBackendRole.Arn

  ###########
  ### SQS ###
  ###########

  NewslettersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "NewslettersQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 3600

###############
### OUTPUTS ###
###############

Outputs:
  WalterAPIAuthEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/auth"
  WalterAPICreateUserEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/users"
  WalterAPIAddStockEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/stocks"
  WalterAPIGetPortfolioEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/portfolios"
  WalterAPIGetPricesEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/prices"
  WalterAPISendNewsletterEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/newsletters"