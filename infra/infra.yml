AWSTemplateFormatVersion: "2010-09-09"
Description: "WalterAIBackend Infrastructure"

Parameters:
  AppEnvironment:
    Type: String
    Description: The environment of the WalterAIBackend stack
    Default: dev
    AllowedValues:
      - dev
      - preprod
      - prod

Resources:

  ##############
  ### LAMBDA ###
  ##############

  WalterAIBackendFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAIBackendFunction
      FunctionVersion: $LATEST
      Name: !Sub "WalterAIBackend-${AppEnvironment}"

  WalterAIBackendFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub "WalterAIBackend-${AppEnvironment}"
        Description: !Sub "WalterAIBackend Lambda (${AppEnvironment})"
        Handler: walter.lambda_handler
        Role: !Join
          - ""
          - - "arn:aws:iam::"
            - !Ref "AWS::AccountId"
            - ":role/"
            - !Ref WalterLambdaRole
        Code:
          S3Bucket: walterai-backend-src
          S3Key: walterai-backend.zip
        Timeout: 60
        Runtime: python3.11
        Architectures:
          - "arm64"
        Layers:
          - !Join
            - ""
            - - "arn:aws:lambda:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":layer:"
              - "WalterAILambdaLayer:18"
        Environment:
          Variables:
            DOMAIN: DEVELOPMENT

  WalterDailyScheduler:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "WalterAIBackendScheduler-${AppEnvironment}"
      ScheduleExpression: cron(0 9 * * ? *)
      State: ENABLED
      Targets:
        - Id: !Sub "WalterAIBackendScheduler-${AppEnvironment}"
          Arn: !Join
            - ""
            - - "arn:aws:lambda:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":function:"
              - !Ref WalterAIBackendFunction
          Input: |-
            {
              "body": {}
            }

  ################
  ### DYNAMODB ###
  ################

  StocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: symbol
            KeyType: HASH
      TableName: !Sub "Stocks-${AppEnvironment}"

  UsersStocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_email
          AttributeType: S
        - AttributeName: stock_symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: user_email
            KeyType: HASH
          - AttributeName: stock_symbol
            KeyType: RANGE
      TableName: !Sub "UsersStocks-${AppEnvironment}"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: email
            KeyType: HASH
      TableName: !Sub "Users-${AppEnvironment}"

  #################
  ### IAM ROLES ###
  #################

  WalterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterAILambaExecutionRole-${AppEnvironment}"
      Description: "Walter AI Lambda execution role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ####################
  ### IAM POLICIES ###
  ####################

  BedrockAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "BedrockAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "bedrock:InvokeModel"
            Resource: "arn:aws:bedrock:us-east-1::foundation-model/meta.llama3-70b-instruct-v1:0"
      Roles:
        - !Ref WalterLambdaRole
  
  CloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "CloudWatchAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"
      Roles:
        - !Ref WalterLambdaRole

  NewslettersBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref NewslettersBucket
                - "/*" 
      Roles:
        - !Ref WalterLambdaRole

  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SecretsManagerAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:PolygonAPIKey-vZymuJ"
      Roles:
        - !Ref WalterLambdaRole

  SimpleEmailSerivceAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SimpleEmailServiceAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ses:Send*"
            Resource: "*"
      Roles:
        - !Ref WalterLambdaRole

  StocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "StocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !Join
              - ""
              - - "arn:aws:dynamodb:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":table/"
                - !Ref StocksTable 
      Roles:
        - !Ref WalterLambdaRole

  TemplatesBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "TemplatesBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref TemplatesBucket
                - "/*"
          - Effect: Allow
            Action:
              - "s3:List*"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref TemplatesBucket
      Roles:
        - !Ref WalterLambdaRole

  UsersStocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersStocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !Join
              - ""
              - - "arn:aws:dynamodb:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":table/"
                - !Ref UsersStocksTable 
      Roles:
        - !Ref WalterLambdaRole

  UsersTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !Join
              - ""
              - - "arn:aws:dynamodb:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":table/"
                - !Ref UsersTable 
      Roles:
        - !Ref WalterLambdaRole

  ##########
  ### S3 ###
  ##########

  NewslettersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "walterai-newsletters-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  NewslettersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewslettersBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: 
              - "s3:PutObject"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref NewslettersBucket
                - "/*" 
            Principal: 
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/"
                  - !Ref WalterLambdaRole

  TemplatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "walterai-templates-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplatesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action: 
              - "s3:GetObject"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref TemplatesBucket
                - "/*" 
            Principal: 
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/"
                  - !Ref WalterLambdaRole
          - Action: 
              - "s3:List*"
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref TemplatesBucket
            Principal: 
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/"
                  - !Ref WalterLambdaRole